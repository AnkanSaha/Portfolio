name: Deploy Backend to VPS

on:
  push:
    branches: [main]

jobs:
  check-and-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 2

      - name: Check for backend changes
        id: check_changes
        run: |
          if git diff --name-only HEAD~1 HEAD | grep -q "^backend/"; then
            echo "backend_changed=true" >> $GITHUB_OUTPUT
          else
            echo "backend_changed=false" >> $GITHUB_OUTPUT
          fi

      - name: Build backend
        if: steps.check_changes.outputs.backend_changed == 'true'
        run: |
          cd backend
          if [ -f "package.json" ]; then
            npm install
            if grep -q '"build"' package.json; then
              npm run build
            fi
          fi

      - name: Prepare deployment files
        if: steps.check_changes.outputs.backend_changed == 'true'
        run: |
          mkdir -p ${{ secrets.PROJECT_NAME }}

          if [ -d "backend/dist" ]; then
            cp -r backend/dist ${{ secrets.PROJECT_NAME }}/
          fi

          if [ -f "backend/package.json" ]; then
            cp backend/package.json ${{ secrets.PROJECT_NAME }}/
          fi

      - name: Save private key
        if: steps.check_changes.outputs.backend_changed == 'true'
        run: |
          echo "${{ secrets.SSH_PRIVATE_KEY }}" | sed 's/\\n/\n/g' > server-key.pem
          chmod 400 server-key.pem
          head -n 2 server-key.pem  # Debug check (can be removed)

      - name: Cleanup server
        if: steps.check_changes.outputs.backend_changed == 'true'
        run: |
          ssh -i server-key.pem -o StrictHostKeyChecking=no -o BatchMode=yes ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_HOST }} "if pm2 list | grep -q '${{ secrets.PROCESS_NAME }}'; then pm2 stop '${{ secrets.PROCESS_NAME }}' && pm2 delete '${{ secrets.PROCESS_NAME }}'; else echo 'Process not found'; fi"

          ssh -i server-key.pem -o StrictHostKeyChecking=no -o BatchMode=yes ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_HOST }} "rm -rf /home/${{ secrets.SERVER_USER }}/${{ secrets.PROJECT_NAME }} && mkdir -p /home/${{ secrets.SERVER_USER }}"

      - name: Deploy to server
        if: steps.check_changes.outputs.backend_changed == 'true'
        run: |
          scp -i server-key.pem -o StrictHostKeyChecking=no -o BatchMode=yes -r ${{ secrets.PROJECT_NAME }}/ ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_HOST }}:/home/${{ secrets.SERVER_USER }}/

      - name: Start app with PM2
        if: steps.check_changes.outputs.backend_changed == 'true'
        run: |
          ssh -i server-key.pem -o StrictHostKeyChecking=no -o BatchMode=yes ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_HOST }} "cd /home/${{ secrets.SERVER_USER }}/${{ secrets.PROJECT_NAME }} && echo '${{ secrets.ENV_VARIABLES }}' > .env"

          ssh -i server-key.pem -o StrictHostKeyChecking=no -o BatchMode=yes ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_HOST }} "cd /home/${{ secrets.SERVER_USER }}/${{ secrets.PROJECT_NAME }} && npm install --force"

          ssh -i server-key.pem -o StrictHostKeyChecking=no -o BatchMode=yes ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_HOST }} "cd /home/${{ secrets.SERVER_USER }}/${{ secrets.PROJECT_NAME }} && npm run start:prod && pm2 save"

      - name: Skip deployment
        if: steps.check_changes.outputs.backend_changed == 'false'
        run: echo "No backend changes detected. Skipping deployment."
          echo '${{ secrets.ENV_VARIABLES }}' > .env
          npm install --force
          npm run start:prod
          EOF

      - name: Skip deployment
        if: steps.check_changes.outputs.backend_changed == 'false'
        run: echo "No backend changes detected. Skipping deployment."
