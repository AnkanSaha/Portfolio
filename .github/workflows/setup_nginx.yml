name: Deploy Nginx Configuration to VPS

on:
  push:
    branches: [main]

jobs:
  check-and-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 2

      - name: Check for config changes
        id: check_changes
        run: |
          if git diff --name-only HEAD~1 HEAD | grep -q "^config/"; then
            echo "config_changed=true" >> $GITHUB_OUTPUT
          else
            echo "config_changed=false" >> $GITHUB_OUTPUT
          fi

      - name: Save private key
        if: steps.check_changes.outputs.config_changed == 'true'
        run: |
          echo "${{ secrets.SSH_PRIVATE_KEY }}" | sed 's/\\n/\n/g' > server-key.pem
          chmod 400 server-key.pem
          head -n 2 server-key.pem  # Debug check (can be removed)

      - name: Deploy Nginx Configuration
        if: steps.check_changes.outputs.config_changed == 'true'
        run: |
          # Copy nginx configuration to VPS
          scp -i server-key.pem -o StrictHostKeyChecking=no -o BatchMode=yes config/ankanweb.conf ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_HOST }}:/tmp/ankanweb.conf

      - name: Update Nginx Configuration
        if: steps.check_changes.outputs.config_changed == 'true'
        run: |
          ssh -i server-key.pem -o StrictHostKeyChecking=no -o BatchMode=yes ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_HOST }} << 'EOF'
            # Move new configuration to nginx directory
            sudo mv /tmp/ankanweb.conf /etc/nginx/conf.d/ankanweb.conf
            
            # Set proper permissions
            sudo chown root:root /etc/nginx/conf.d/ankanweb.conf
            sudo chmod 644 /etc/nginx/conf.d/ankanweb.conf
            
            # Test nginx configuration
            sudo nginx -t
            
            # If configuration is valid, reload nginx
            if [ $? -eq 0 ]; then
              sudo systemctl reload nginx
              echo "Nginx configuration deployed and reloaded successfully"
            else
              echo "Nginx configuration test failed"
              exit 1
            fi
          EOF

      - name: Generate SSL Certificate
        if: steps.check_changes.outputs.config_changed == 'true'
        run: |
          ssh -i server-key.pem -o StrictHostKeyChecking=no -o BatchMode=yes ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_HOST }} << 'EOF'
            # Install certbot if not already installed
            if ! command -v certbot &> /dev/null; then
              sudo apt update
              sudo apt install -y certbot python3-certbot-nginx
            fi
            
            # Extract domain names from nginx configuration
            DOMAINS=$(sudo grep -h "server_name" /etc/nginx/conf.d/ankanweb.conf | sed 's/.*server_name\s*//g' | sed 's/;//g' | tr -s ' ' | tr ' ' '\n' | grep -v "^$" | sort -u | tr '\n' ' ')
            
            if [ -z "$DOMAINS" ]; then
              echo "No domains found in nginx configuration"
              exit 1
            fi
            
            echo "Found domains: $DOMAINS"
            
            # Build certbot command with all domains
            CERTBOT_DOMAINS=""
            for domain in $DOMAINS; do
              if [ "$domain" != "_" ]; then  # Skip default server names
                CERTBOT_DOMAINS="$CERTBOT_DOMAINS -d $domain"
              fi
            done
            
            if [ -z "$CERTBOT_DOMAINS" ]; then
              echo "No valid domains found for SSL certificate"
              exit 1
            fi
            
            echo "Generating SSL certificate for domains: $CERTBOT_DOMAINS"
            
            # Generate SSL certificate automatically (non-interactive)
            sudo certbot --nginx --non-interactive --agree-tos -m ${{ secrets.SSL_EMAIL }} $CERTBOT_DOMAINS --redirect
            
            # Enable automatic renewal
            sudo systemctl enable certbot.timer
            sudo systemctl start certbot.timer
            
            # Test automatic renewal
            sudo certbot renew --dry-run
            
            echo "SSL certificate generated and configured successfully"
          EOF

      - name: Skip deployment
        if: steps.check_changes.outputs.config_changed == 'false'
        run: echo "No config changes detected. Skipping nginx deployment."
